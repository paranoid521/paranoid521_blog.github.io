<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Paranoid&#39;s cottage</title>
  
  <subtitle>I would rather sit on a pumpkin and have it all to myself, than be crowded on a velvet cushion.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.fetdesign.com/"/>
  <updated>2019-11-03T10:22:14.152Z</updated>
  <id>https://blog.fetdesign.com/</id>
  
  <author>
    <name>Paranoid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ajax跨域请求时，sessionId不一样，导致无法记住登陆状态</title>
    <link href="https://blog.fetdesign.com/archives/2d804140.html"/>
    <id>https://blog.fetdesign.com/archives/2d804140.html</id>
    <published>2019-11-03T10:13:44.242Z</published>
    <updated>2019-11-03T10:22:14.152Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;跨域登录请求时，一直显示未登录，但后台已设置运行CROS跨域请求。&lt;br&gt;通过Fiddler抓包发现登录数据没有问题，但请求未携带cookies，后台无法获取cookie。原因是两次请求不是同一个sessionid，服务器端，认为还没有登陆。&lt;/p&gt;&lt;p&gt;解决方法是：&lt;br&gt;允许客户端带上cookie，ajax设置&lt;br&gt;xhrFields:{&lt;br&gt;    withCredentials:true&lt;br&gt;},&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="ajax" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/ajax/"/>
    
    
      <category term="跨域请求" scheme="https://blog.fetdesign.com/tags/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot+Spring Security无法实现跨域解决办法</title>
    <link href="https://blog.fetdesign.com/archives/1c420fb5.html"/>
    <id>https://blog.fetdesign.com/archives/1c420fb5.html</id>
    <published>2019-10-27T11:34:05.609Z</published>
    <updated>2019-10-27T11:37:52.589Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot-Spring-Security无法实现跨域解决办法&quot;&gt;&lt;a href=&quot;#SpringBoot-Spring-Security无法实现跨域解决办法&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot+Spring Security无法实现跨域解决办法&quot;&gt;&lt;/a&gt;SpringBoot+Spring Security无法实现跨域解决办法&lt;/h1&gt;&lt;p&gt;遇到一跨域问题，通过本方法解决。&lt;/p&gt;&lt;p&gt;版权声明：本文为博主原创文章，遵循&lt;a href=&quot;http://creativecommons.org/licenses/by-sa/4.0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; CC 4.0 BY-SA &lt;/a&gt;版权协议，转载请附上原文出处链接和本声明。&lt;/p&gt;&lt;p&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/w903328615/article/details/80503750&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/w903328615/article/details/80503750&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="spring security" scheme="https://blog.fetdesign.com/tags/spring-security/"/>
    
      <category term="cros" scheme="https://blog.fetdesign.com/tags/cros/"/>
    
  </entry>
  
  <entry>
    <title>springboot异常：java.lang.NoClassDefFoundError Antlr RecognitionException解决</title>
    <link href="https://blog.fetdesign.com/archives/543ed636.html"/>
    <id>https://blog.fetdesign.com/archives/543ed636.html</id>
    <published>2019-07-13T14:05:18.880Z</published>
    <updated>2019-07-13T15:05:47.244Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;springboot异常：java.lang.NoClassDefFoundError: antlr/RecognitionException解决&lt;/p&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java&lt;span class=&quot;selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.NoClassDefFoundError&lt;/span&gt;: antlr/ANTLRException    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hql&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ast&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ASTQueryTranslatorFactory&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.createQueryTranslator&lt;/span&gt;(ASTQueryTranslatorFactory&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.engine&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.query&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.HQLQueryPlan&lt;/span&gt;.(HQLQueryPlan&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.engine&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.query&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.HQLQueryPlan&lt;/span&gt;.(HQLQueryPlan&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.engine&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.query&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.QueryPlanCache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.getHQLQueryPlan&lt;/span&gt;(QueryPlanCache&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.impl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.AbstractSessionImpl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.getHQLQueryPlan&lt;/span&gt;(AbstractSessionImpl&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;156&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.impl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.AbstractSessionImpl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.createQuery&lt;/span&gt;(AbstractSessionImpl&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;135&lt;/span&gt;)    at org&lt;span class=&quot;selector-class&quot;&gt;.hibernate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.impl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.SessionImpl&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.createQuery&lt;/span&gt;(SessionImpl&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1760&lt;/span&gt;)    at DataAccess&lt;span class=&quot;selector-class&quot;&gt;.WKS&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Repositories&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.WksRepositoryBase&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.LoadAllData&lt;/span&gt;(WksRepositoryBase&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;193&lt;/span&gt;)    at Run.main(Run&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;)Caused by: java&lt;span class=&quot;selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ClassNotFoundException&lt;/span&gt;: antlr&lt;span class=&quot;selector-class&quot;&gt;.ANTLRException&lt;/span&gt;    at java&lt;span class=&quot;selector-class&quot;&gt;.net&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.URLClassLoader&lt;/span&gt;$&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.run(Unknown Source)    at java&lt;span class=&quot;selector-class&quot;&gt;.net&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.URLClassLoader&lt;/span&gt;$&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.run(Unknown Source)    at java&lt;span class=&quot;selector-class&quot;&gt;.security&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.AccessController&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.doPrivileged&lt;/span&gt;(Native Method)    at java&lt;span class=&quot;selector-class&quot;&gt;.net&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.URLClassLoader&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.findClass&lt;/span&gt;(Unknown Source)    at java&lt;span class=&quot;selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ClassLoader&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.loadClass&lt;/span&gt;(Unknown Source)    at sun&lt;span class=&quot;selector-class&quot;&gt;.misc&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.Launcher&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;$AppClassLoader&lt;/span&gt;.loadClass(Unknown Source)    at java&lt;span class=&quot;selector-class&quot;&gt;.lang&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ClassLoader&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.loadClass&lt;/span&gt;(Unknown Source)    ... &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; more&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="springBoot" scheme="https://blog.fetdesign.com/tags/springBoot/"/>
    
  </entry>
  
  <entry>
    <title>Git Hooks实现项目自动部署</title>
    <link href="https://blog.fetdesign.com/archives/5280bf10.html"/>
    <id>https://blog.fetdesign.com/archives/5280bf10.html</id>
    <published>2019-02-14T03:16:39.875Z</published>
    <updated>2019-02-14T03:17:02.545Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;创建git用户&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;adduser git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;创建裸仓库：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git init --bare GitBook.git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;更改仓库所属用户和组：
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.fetdesign.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.fetdesign.com/tags/Git/"/>
    
      <category term="git hooks" scheme="https://blog.fetdesign.com/tags/git-hooks/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现强制https连接</title>
    <link href="https://blog.fetdesign.com/archives/c4e6a0ba.html"/>
    <id>https://blog.fetdesign.com/archives/c4e6a0ba.html</id>
    <published>2019-02-14T02:45:00.521Z</published>
    <updated>2019-02-14T03:18:35.395Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;修改Nginx配置文件&lt;/p&gt;
&lt;p&gt;../nginx/sites-available/default&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="https" scheme="https://blog.fetdesign.com/tags/https/"/>
    
      <category term="Nginx" scheme="https://blog.fetdesign.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>PAT 乙级 1002 写出这个数</title>
    <link href="https://blog.fetdesign.com/archives/e350358e.html"/>
    <id>https://blog.fetdesign.com/archives/e350358e.html</id>
    <published>2019-02-08T13:21:43.914Z</published>
    <updated>2019-02-10T02:16:19.809Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;1002 写出这个数 （20 分）&lt;/p&gt;
&lt;p&gt;读入一个正整数 n，计算其各位数字之和，用汉语拼音写出和的每一位数字。&lt;/p&gt;
&lt;h3 id=&quot;输入格式：&quot;&gt;&lt;a href=&quot;#输入格式：&quot; class=&quot;headerlink&quot; title=&quot;输入格式：&quot;&gt;&lt;/a&gt;输入格式：&lt;/h3&gt;&lt;p&gt;每个测试输入包含 1 个测试用例，即给出自然数 n 的值。这里保证 n 小于 10​100​​。&lt;/p&gt;
&lt;h3 id=&quot;输出格式：&quot;&gt;&lt;a href=&quot;#输出格式：&quot; class=&quot;headerlink&quot; title=&quot;输出格式：&quot;&gt;&lt;/a&gt;输出格式：&lt;/h3&gt;&lt;p&gt;在一行内输出 n 的各位数字之和的每一位，拼音数字间有 1 空格，但一行中最后一个拼音数字后没有空格。&lt;/p&gt;
&lt;h3 id=&quot;输入样例：&quot;&gt;&lt;a href=&quot;#输入样例：&quot; class=&quot;headerlink&quot; title=&quot;输入样例：&quot;&gt;&lt;/a&gt;输入样例：&lt;/h3&gt;&lt;figure class=&quot;highlight lsl&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;1234567890987654321123456789&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;输出样例：&quot;&gt;&lt;a href=&quot;#输出样例：&quot; class=&quot;headerlink&quot; title=&quot;输出样例：&quot;&gt;&lt;/a&gt;输出样例：&lt;/h3&gt;&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yi &lt;span class=&quot;keyword&quot;&gt;san&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;wu&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://blog.fetdesign.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://blog.fetdesign.com/tags/PAT/"/>
    
      <category term="数据结构" scheme="https://blog.fetdesign.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Pat 乙级 1001害死人不偿命的(3n+1)猜想</title>
    <link href="https://blog.fetdesign.com/archives/27a359ad.html"/>
    <id>https://blog.fetdesign.com/archives/27a359ad.html</id>
    <published>2019-02-08T03:49:17.124Z</published>
    <updated>2019-02-08T06:46:37.671Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2019/02/08/5c5cffaa3f1f7.png&quot; alt=&quot;如何才能PAT甲级过八九十分&quot;&gt;&lt;/p&gt;
&lt;p&gt;1001 害死人不偿命的(3n+1)猜想 （15 分）&lt;/p&gt;
&lt;p&gt;卡拉兹(Callatz)猜想：&lt;/p&gt;
&lt;p&gt;对任何一个正整数 n，如果它是偶数，那么把它砍掉一半；如果它是奇数，那么把 (3n+1) 砍掉一半。这样一直反复砍下去，最后一定在某一步得到 n=1。卡拉兹在 1950 年的世界数学家大会上公布了这个猜想，传说当时耶鲁大学师生齐动员，拼命想证明这个貌似很傻很天真的命题，结果闹得学生们无心学业，一心只证 (3n+1)，以至于有人说这是一个阴谋，卡拉兹是在蓄意延缓美国数学界教学与科研的进展……&lt;/p&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://blog.fetdesign.com/categories/PAT/"/>
    
    
      <category term="PAT" scheme="https://blog.fetdesign.com/tags/PAT/"/>
    
      <category term="数据结构" scheme="https://blog.fetdesign.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>C语言基础 - 循环控制</title>
    <link href="https://blog.fetdesign.com/archives/66c9e6d7.html"/>
    <id>https://blog.fetdesign.com/archives/66c9e6d7.html</id>
    <published>2019-01-05T01:08:37.446Z</published>
    <updated>2019-01-06T09:01:37.708Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;break：退出整个循环&lt;br&gt;continue：退出本轮循环&lt;br&gt;在多层嵌套循环中，只能对它所在的那套循环做。&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://blog.fetdesign.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="C语言" scheme="https://blog.fetdesign.com/tags/C%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Flarum安装教程-PHP7、Apache和MySQL5.7</title>
    <link href="https://blog.fetdesign.com/archives/9e1567d2.html"/>
    <id>https://blog.fetdesign.com/archives/9e1567d2.html</id>
    <published>2018-03-29T09:58:36.000Z</published>
    <updated>2019-01-06T09:05:48.720Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;安装Flarum论坛软件&lt;/p&gt;
&lt;p&gt;##系统需求&lt;br&gt;服务器： Apache (需要支持 mod_rewrite)、Nginx、Lighttpd&lt;br&gt;PHP 5.5+，需要开启的扩展：mbstring, pdo_mysql, openssl, json, gd, dom, fileinfo&lt;br&gt;MySQL 5.5+&lt;/p&gt;
&lt;p&gt;开启Apache的mod_rewrite：&lt;/p&gt;
    
    </summary>
    
    
      <category term="教程" scheme="https://blog.fetdesign.com/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="webapp" scheme="https://blog.fetdesign.com/tags/webapp/"/>
    
  </entry>
  
  <entry>
    <title>PAT1001总结</title>
    <link href="https://blog.fetdesign.com/archives/3e9402bb.html"/>
    <id>https://blog.fetdesign.com/archives/3e9402bb.html</id>
    <published>2017-04-16T03:54:01.000Z</published>
    <updated>2019-01-05T11:44:19.799Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;#####思路总结&lt;br&gt;1.完全没必要将其转换成字符串，字符串处理相对复杂。&lt;br&gt;2.要先对结果进行分析，尤其当结果的情况有限时。根本没必要使用按位输出。&lt;br&gt;3.先在草稿纸上对问题进行分析，对结果进行分析，然后再考虑代码实现，不应该在代码实现上浪费太多时间。&lt;br&gt;4.代码越简洁越好，调试清晰方便。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="PAT" scheme="https://blog.fetdesign.com/categories/PAT/"/>
    
    
      <category term="A_level" scheme="https://blog.fetdesign.com/tags/A-level/"/>
    
  </entry>
  
  <entry>
    <title>Spring上传文件</title>
    <link href="https://blog.fetdesign.com/archives/e3d4c9ae.html"/>
    <id>https://blog.fetdesign.com/archives/e3d4c9ae.html</id>
    <published>2017-01-13T04:37:01.000Z</published>
    <updated>2019-01-06T09:04:19.927Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;通过spring上传文件示例：&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Spring" scheme="https://blog.fetdesign.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>利用Git Hooks进行自动部署</title>
    <link href="https://blog.fetdesign.com/archives/a2d5c370.html"/>
    <id>https://blog.fetdesign.com/archives/a2d5c370.html</id>
    <published>2017-01-13T04:30:01.000Z</published>
    <updated>2019-01-06T09:05:06.182Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;首先的有一个搭建好的git服务器，在想要自动部署的git库的hook文件中添加自动部署hook，在hook中将DeployDir配置为网站根目录，在网站根目录运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;git clone /usr/gitRepo/web.git&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将web文件克隆下来，这样在将更改提交到git仓库的时候，就会自动部署网站。&lt;/p&gt;
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.fetdesign.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.fetdesign.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Jquery异步-Datatable前端</title>
    <link href="https://blog.fetdesign.com/archives/4317f2cd.html"/>
    <id>https://blog.fetdesign.com/archives/4317f2cd.html</id>
    <published>2016-11-06T04:38:01.000Z</published>
    <updated>2019-01-06T09:02:59.917Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;基于JQuery的datatable更新示例：&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://blog.fetdesign.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://blog.fetdesign.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>普通类如何调用Spring实例化好的action操作数据库</title>
    <link href="https://blog.fetdesign.com/archives/ba5542b4.html"/>
    <id>https://blog.fetdesign.com/archives/ba5542b4.html</id>
    <published>2016-11-06T04:14:01.000Z</published>
    <updated>2019-01-06T09:04:09.061Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;普通的类如何使用service中配置的seesionFctory操作数据库，通过WebApplicationContext获取容器，即可得到spring中实例化好的action
        
      
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://blog.fetdesign.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://blog.fetdesign.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>使用Js异步post Body</title>
    <link href="https://blog.fetdesign.com/archives/760d761f.html"/>
    <id>https://blog.fetdesign.com/archives/760d761f.html</id>
    <published>2016-10-22T08:38:01.000Z</published>
    <updated>2019-01-06T09:04:37.829Z</updated>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;//AJAX异步请求
var xmlHttp;
//该函数用于创建一个XMLHttpRequest对象
function createXMLHttpRequest() {
    if (window.ActiveXObject) {
        xmlHttp = new ActiveXObject(&amp;quot;Microsoft.XMLHTTP&amp;quot;);
    } else if (window.XMLHttpRequest) {
        xmlHttp = new XMLHttpRequest();
    }
}

function saveRoute(a,b) {
    //创建一个XMLHttpRequest对象
    createXMLHttpRequest();
    //将状态触发器绑定到一个函数
    xmlHttp.onreadystatechange = showStaus;
    //通过GET方法向指定的URL建立服务器的调用

    var parm = &amp;quot;route=&amp;quot;+a+&amp;quot;&amp;amp;points=&amp;quot;+b;            //构造URL参数
    xmlHttp.open(&amp;quot;POST&amp;quot;, &amp;quot;phone!saveCplInfo.action?&amp;quot;,true);

    xmlHttp.setRequestHeader(&amp;quot;cache-control&amp;quot;,&amp;quot;no-cache&amp;quot;);
    xmlHttp.setRequestHeader(&amp;quot;contentType&amp;quot;,&amp;quot;text/html;charset=uft-8&amp;quot;) //指定发送的编码
    xmlHttp.setRequestHeader(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/x-www-form-urlencoded;&amp;quot;);  //设置请求头信息
    xmlHttp.send(parm); //设置为发送给服务器数据
    //发送请求
    //xmlHttp.send();
}
var flag = 0;
function showStaus() {
    //定义一个变量用于存放从服务器返回的响应结果
    var result;

    result = eval(&amp;quot;(&amp;quot;+xmlHttp.responseText+&amp;quot;)&amp;quot;);
    if(flag != b){
        alert(result.mes);
        flag = b;
    }

}&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Linux下生成图标</title>
    <link href="https://blog.fetdesign.com/archives/70247203.html"/>
    <id>https://blog.fetdesign.com/archives/70247203.html</id>
    <published>2016-10-15T09:07:00.000Z</published>
    <updated>2019-01-06T09:02:16.131Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;sudo gedit   /usr/share/applications/webstorm.desktop&lt;/p&gt;
&lt;p&gt;内容输入：&lt;/p&gt;
&lt;p&gt;[Desktop
        
      
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="linux" scheme="https://blog.fetdesign.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>解决Mysql 8小时断开连接问题，proxool连接池配置</title>
    <link href="https://blog.fetdesign.com/archives/5b07aded.html"/>
    <id>https://blog.fetdesign.com/archives/5b07aded.html</id>
    <published>2016-09-23T09:47:01.000Z</published>
    <updated>2019-01-06T09:02:51.804Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;以下是web.xml的配置信息。&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;servlet&amp;gt;
&amp;lt;servlet-name&amp;gt;proxoolServletConfigurator&amp;lt;/servlet-name&amp;gt;
&amp;lt;servlet-class&amp;gt;
org.logicalcobwebs.proxool.configuration.ServletConfigurator
&amp;lt;/servlet-class&amp;gt;
&amp;lt;init-param&amp;gt;
&amp;lt;param-name&amp;gt;xmlFile&amp;lt;/param-name&amp;gt;
&amp;lt;param-value&amp;gt;WEB-INF/proxool.xml&amp;lt;/param-value&amp;gt;
&amp;lt;/init-param&amp;gt;
&amp;lt;load-on-startup&amp;gt;1&amp;lt;/load-on-startup&amp;gt;
&amp;lt;/servlet&amp;gt;&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://blog.fetdesign.com/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Java" scheme="https://blog.fetdesign.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Git的冲突解决</title>
    <link href="https://blog.fetdesign.com/archives/c1eb58d0.html"/>
    <id>https://blog.fetdesign.com/archives/c1eb58d0.html</id>
    <published>2016-05-07T11:15:01.000Z</published>
    <updated>2019-01-06T09:05:17.156Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;现在，存在两个分支dev和MXJ，MXJ分支是合并自dev分支的，相当于目前是同一个版本，所以MXJ分支的内容和dev分支的完全一样，此时如果修改了MXJ分支，再把MXJ分支合并到dev分支，那么MXJ做的修改便会合并到dev分支上。
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.fetdesign.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.fetdesign.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>在Eclipse上使用git</title>
    <link href="https://blog.fetdesign.com/archives/3f2b581e.html"/>
    <id>https://blog.fetdesign.com/archives/3f2b581e.html</id>
    <published>2016-05-06T16:15:01.000Z</published>
    <updated>2019-01-06T09:04:57.040Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Eclipse里集成了git，所以使用比较方便。不需要再在git bash里输入命令。&lt;br&gt;从代码库clone项目后，将其导入eclipse。&lt;br&gt;在项目上点右键—&amp;gt;Team
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.fetdesign.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.fetdesign.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Git使用简介</title>
    <link href="https://blog.fetdesign.com/archives/8d3dd6b3.html"/>
    <id>https://blog.fetdesign.com/archives/8d3dd6b3.html</id>
    <published>2016-05-02T15:32:01.000Z</published>
    <updated>2019-01-06T09:05:28.846Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;工作区–&amp;gt;暂存区–&amp;gt;本地库—–》远程库&lt;/p&gt;
&lt;p&gt;当修改了某个文件，给文件的修改是在工作区，&lt;br&gt;git add . 则是把工作区的修改放到暂存区，每当有修改，运行git add .都会把修改放到到暂存区&lt;br&gt;git commit -m “内容” git commit则是把暂存区所有git add的修改都提交到本地代码库。双引号里的内容为说明修改了哪些内容&lt;br&gt;git push origin master 把本地代码库推送到远程代码库，远程库的默认名是origin
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.fetdesign.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git" scheme="https://blog.fetdesign.com/tags/Git/"/>
    
  </entry>
  
</feed>
